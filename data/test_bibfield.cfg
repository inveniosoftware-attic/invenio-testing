include "test_authors.cfg"
include "test_title.cfg"

abstract:
    creator:
        @legacy(("520__a", "abstract", "abstract.summary"),
                ("520__b", "abstract.expansion"),
                ("520__9", "abstract.number"))
        marc, "520__", {'summary':value['a'], 'expansion':value['b'], 'number':value['9']}

collection:
    creator:
        @legacy(("980__%", "collection identifier", "collection"),
                ("980__a", "collection.primary"),
                ("980__b", "collection.secondary"),
                ("980__c", "collection.deleted"))
        marc, "980__", { 'primary':value['a'], 'secondary':value['b'], 'deleted':value['c'] }

@persistent_identifier(1)
doi:
	creator:
		@legacy (("0247_2", "doi"),)
		marc, "0247_", get_doi(value)
	checker:
		check_field_existence(0,1)

email:
    creator:
        @legacy(("8560_f", "email"),)
        marc, "8560_", value['f']

isbn:
    creator:
        @legacy(("020__a", "isbn", "isbn.isbn"),
                ("020__u", "isbn.medium"))
        marc, "020__", {'isbn':value['a'], 'medium':value['u']}

keywords:
    creator:
        @legacy(("6531_a", "keyword", "keyword.term"),
                ("6531_9", "keyword.institute"))
        marc, "6531_", { 'term': value['a'], 'institute': value['9'] }
    checker:
        check_field_existence(0,'n')
        check_field_type('str')

language:
    creator:
        @legacy(("041__a", "language"),)
        marc, "041__", value['a']

primary_report_number:
    creator:
        @legacy(("037__a", "primary report number", "primary_report_number"),)
        marc, "037__", value['a']

@persistent_identifier(0)
recid:
    creator:
        @legacy(("001", "record ID", "recid"),)
        marc, "001", value
    checker:
        check_field_existence(1)
        check_field_type('num')

report_number:
    creator:
        @legacy(("088_a", "additional report number", "report_number.report_number"),
                ("088_9", "internal"))
        marc, "088__", {'report_number':value['a'], 'internal':value['9']}

#To be overwritten by test_tiltle.cfg
title:
    creator:
        marc, "245__", value
    checker:
        check_field_existence(0,1)
    documentation:
        "Some useless documentation"

subject:
    creator:
        @legacy(("65017a", "main subject", "subject.term"),
                ("650172", "subject.source"),
                ("65017e", "subject.relator"))
        marc, "65017", {'term':value['a'], 'source':value['2'], 'relator':value['e']}
    documentation:
        @subfield term: "Topical term or geographic name"
        @subfield source: "Source of heading or term"
        @subfield relator: "Specifies the relationship between the topical heading and the described materials"

url:
    creator:
        @legacy(("8564_p", "url.path"),
                ("8564_q", "url.eformat"),
                ("8564_s", "url.file_size"),
                ("8564_u", "url", "url.url"),
                ("8564_x", "url.nonpublic_note"),
                ("8564_y", "caption", "url.link"),
                ("8564_z", "url.public_note"))
        marc, "8564_", {'path':value['d'], 'eformart':value['q'], 'file_size':value['s'], 'url':value['u'], 'nonpublic_note':value['x'], 'link':value['y'], 'public_note':value['z']}
    documentation:
        @subfield url: "used for URL and URN, repeatable for URN. repeat 856 for several url's"
        @subfield public_note: "Stamped by WebSubmit: DATE"

###############################################################################
##########                                                           ##########
##########       DERIVED AND CALCULATED FIELDS DEFINITION            ##########
##########                                                           ##########
###############################################################################

_persistent_identifiers_keys:
    calculated:
        @parse_first(('system_control_number', 'recid', 'doi', 'oai'))
        get_persistent_identifiers_keys(self.keys())
    documentation:
        """
        This field will tell you which fields among all are considered as
        persistent identifiers (decorated with @persistent_identifier)
        If a new persistent identifier field is added the cached version of this
        field must be rebuild.

        Note: If a new persistent idenfier is added the list of fields to parse
        before this one should be updated
        """

_random:
    derived:
        @do_not_cache
        random.randint(0,100)
    documentation:
        "Checks @do_not_cache"

number_of_authors:
    derived:
        @parse_first(('authors',))
        @depends_on(('authors',))
        len(self['authors'])
    checker:
		check_field_existence(0, 1)
        check_field_type('num')
    documentation:
        "Number of authors"

@persistent_identifier(2)
dummy:
    derived:
        @parse_first(('number_of_authors',))
        @depends_on(('authors',))
        self['nunmber_of_authors']
    checker:
		check_field_existence(0, 1)
		check_field_type('num')
    documentation:
        "Dummy number of authors"

_number_of_copies:
    calculated:
        @parse_first(('recid', 'collection'))
        @depends_on(('recid', 'collection.primary'))
        @only_if(('BOOK' in self['collection.primary'],))
        number_of_copies(self['recid'])
    checker:
		check_field_existence(0, 1)
		check_field_type('num')
    documentation:
        "Number of copies"
